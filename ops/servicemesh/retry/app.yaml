apiVersion: v1
kind: Service
metadata:
  name: retry
  labels:
    app: retry
spec:
  selector:
    app: retry
  ports:
  - port: 8000
    targetPort: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: goapp
  labels:
    app: retry
data:
  main.go: |-
    package main

    import (
      "fmt"
      "log"
      "net/http"
    )

    var count int8 = 0

    var errorCodes = [4]int16{409, 502, 503, 504}

    func main() {
      fmt.Println("running server...")
      http.HandleFunc("/retry", retriableHandler)
      http.ListenAndServe(":8000", nil)
    }

    func retriableHandler(w http.ResponseWriter, r *http.Request) {
      if count < 4 {
        status := errorCodes[count]
        count++
        log.Printf("error!! [%d] [%d]", count, status)
        w.WriteHeader(int(status))
        fmt.Fprintf(w, "[%d]意図的なエラーですので心配しないでくださいね", status)
        return
      }
      log.Printf("succeed!!　[%d]", count)
      count = 0
      fmt.Fprintf(w, "ようやく成功しましたね。遅いですよ。")
    }
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: retry
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: retry
    spec:
      containers:
      - name: retry
        image: golang:1.13
        ports:
          - name: http
            containerPort: 8000
        command: ["sh", "-c", "go run /app/main.go"]
        volumeMounts:
        - name: goapp
          mountPath: /app
      volumes:
        - name: goapp
          configMap:
            name: goapp
